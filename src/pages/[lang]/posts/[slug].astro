---
import { CollectionEntry, getCollection } from "astro:content";
import Posts from "@layouts/Posts.astro";
import PostDetails from "@layouts/PostDetails.astro";
import getSortedPosts from "@utils/getSortedPosts";
import getPageNumbers from "@utils/getPageNumbers";
import slugify from "@utils/slugify";
import { SITE } from "@config";
import { languages } from "@i18n/ui";

export interface Props {
  post: CollectionEntry<"blog">;
}

export async function getStaticPaths() {
  // const posts = await getCollection("blog");

  // posts by language
  const res = {} as { [key: string]: CollectionEntry<"blog">[] };
  await Promise.all(
    Object.keys(languages).map(async lang => {
      const posts = await getCollection(
        "blog",
        ({ data }) => data.language === lang
      );
      res[lang] = posts;
    })
  );

  const postResult: {
    params: { lang: string; slug: string };
    props: { post: CollectionEntry<"blog"> };
  }[] = [];
  Object.keys(res).forEach(lang => {
    const posts = res[lang];
    postResult.push(
      ...posts.map(post => {
        const [lang] = post.slug.split("/");
        return {
          params: { lang, slug: slugify(post.data) },
          props: { post },
        };
      })
    );
  });

  // get pageNumber per language
  const pagePaths: { params: { lang: string; slug: string } }[] = [];
  Object.keys(res).forEach(lang => {
    const posts = res[lang];
    pagePaths.push(
      ...getPageNumbers(posts.length).map(pageNum => {
        return {
          params: { lang, slug: String(pageNum) },
        };
      })
    );
  });

  return [...postResult, ...pagePaths];
}

const { lang, slug } = Astro.params;
const { post } = Astro.props;

const posts = await getCollection(
  "blog",
  ({ data }) => data.language.toString() === lang
);

const sortedPosts = getSortedPosts(posts);

const totalPages = getPageNumbers(sortedPosts.length);

const currentPage =
  slug && !isNaN(Number(slug)) && totalPages.includes(Number(slug))
    ? Number(slug)
    : 0;
const lastPost = currentPage * SITE.postPerPage;
const startPost = lastPost - SITE.postPerPage;

const paginatedPosts = sortedPosts.slice(startPost, lastPost);
---

{
  post ? (
    <PostDetails post={post} />
  ) : (
    <Posts
      posts={paginatedPosts}
      pageNum={currentPage}
      totalPages={totalPages.length}
    />
  )
}
